@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

@mixin text-field {
 display: inline-block;
  outline: none;
  text-decoration: none;
  font: 14px/100% Arial, Helvetica, sans-serif;
  padding: .5em;
  text-shadow: 0 1px 1px rgba(0,0,0,.3);
  @include rounded();
  @include box-shadow(0, 1px, 2px, rgba(0, 0, 0, 0.2));
}

@mixin button($color: $red, $text_color: $white) {
  display: inline-block;
  outline: none;
  cursor: pointer;
  text-align: center;
  text-decoration: none;
  font: 14px/100% Arial, Helvetica, sans-serif;
  padding: .5em 2em .55em;
  text-shadow: 0 1px 1px rgba(0,0,0,.3);
  @include rounded();
  @include box-shadow(0, 1px, 2px, rgba(0, 0, 0, 0.2));

  color: $text_color !important;
  font-weight: bold;
  border: solid 1px darken($color, 18%);
  background: $color;
  @include gradient(saturate($color, 15%), darken($color, 15%));

  &:hover {
    text-decoration: none;
    background: saturate($color, 10%);
    @include gradient(saturate($color, 5%), darken($color, 5%));
  }

  &:active {
    position: relative;
    top: 1px;
    color: saturate($color, 15%);
    @include gradient(saturate($color, 15%), lighten($color, 15%));
  }
}

@mixin rounded($radius: 0.5em) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

@mixin gradient($from, $to) {
  background: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
  background: -moz-linear-gradient(top,  $from, $to);
  filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
}

/*
 * Mixin for clearfix
 * @include clearfix;
*/
@mixin clearfix {
  &:before, &:after { content: ""; display: table; }
  &:after { clear: both; }
  *zoom: 1;
}

/*
 * Apply a CSS3 box-shadow
 * @include boxShadow(5px, 5px, 10px, #000);
 */
@mixin boxShadow($x: 5px, $y: 5px, $blur: 10px, $spread: 10px, $color: #000) {  
  -webkit-box-shadow: $x $y $blur $spread $color;
      box-shadow: $x $y $blur $spread $color;
}

/*
 * Apply an inset CSS3 box-shadow
 * @include insetBoxShadow(5px, 5px, 10px, #000);
 */
@mixin insetBoxShadow($x: 5px, $y: 5px, $blur: 10px, $spread: 10px, $color: #000) {
  -webkit-box-shadow: inset $x $y $blur $spread $color;
    box-shadow: inset $x $y $blur $spread $color;
}

/*
 * Apply a CSS3 border radius
 * @include borderRadius(4px);
 */
@mixin borderRadius($radius: 4px) {
  -webkit-border-radius: $radius;
          border-radius: $radius;
  -moz-background-clip: padding; -webkit-background-clip: padding-box; background-clip: padding-box;
}

/*
 * Apply a CSS3 border radius to the top corners only
 * @include borderTopRadius(4px);
 */
@mixin borderRightRadius($radius: 4px) {
  -webkit-border-top-right-radius: $radius;
  -webkit-border-bottom-right-radius: $radius;
  border-top-right-radius: $radius;
  border-bottom-right-radius: $radius;
}

/*
 * Apply a CSS3 border radius to the right corners only
 * @include borderRightRadius(4px);
 */
@mixin borderLeftRadius($radius: 4px) {
  -webkit-border-top-left-radius: $radius;
  -webkit-border-bottom-left-radius: $radius;
  border-top-left-radius: $radius;
  border-bottom-left-radius: $radius;
}

/*
 * Apply a CSS3 border radius to the bottom corners only
 * @include borderBottomRadius(4px);
 */
@mixin borderBottomRadius($radius: 4px) {
  -webkit-border-bottom-right-radius: $radius;
  -webkit-border-bottom-left-radius: $radius;
  -moz-border-radius-bottomright: $radius;
  -moz-border-radius-bottomleft: $radius;
  border-bottom-right-radius: $radius;
  border-bottom-left-radius: $radius;
}

/*
 * Apply a CSS3 border radius to the left corners only
 * @include borderLeftRadius(4px);
 */
@mixin borderLeftRadius($radius: 4px) {
  -webkit-border-top-left-radius: $radius;
  -webkit-border-bottom-left-radius: $radius;
  -moz-border-radius-topleft: $radius;
  -moz-border-radius-bottomleft: $radius;
  border-top-left-radius: $radius;
  border-bottom-left-radius: $radius;
}


/*
 * Apply a CSS3 linear gradient
 *
 * $from - The original colour stop of the gradient, eg #FF0000 or #FF0000 20%
 * $to - The final colour stop of the gradient
 * $fallback - A fallback background-color; if none is provided, the $from colour is used
 * $start - The starting point of the gradient
 *
 * @include linearGradient(red, green);
 * @include linearGradient(red, green, transparent);
 * @include linearGradient(red 50%, green 100%);
 */
@mixin linearGradient($from, $to, $solid: false, $start: top) {
  @if ($solid) {
    background-color: $solid;
  } @else {
    background-color: $from;
  }
  background-image: -webkit-linear-gradient($start, $from, $to);
  background-image: -moz-linear-gradient($start, $from, $to);
  background-image: -ms-linear-gradient($start, $from, $to);
  background-image: -o-linear-gradient($start, $from, $to);
  background-image: linear-gradient($start, $from, $to);
}

/*
 * Apply a CSS3 box-rotate
 * @include boxRotate(10deg);
 */
@mixin boxRotate($deg) {
  -webkit-transform: rotate($deg);
  -moz-transform: rotate($deg);
  -ms-transform: rotate($deg);
  -o-transform: rotate($deg);
  transform: rotate($deg);
  filter: progid:DXImageTransform.Microsoft.Matrix(M11=0.9914448613738104, M12=-0.13052619222005157,M21=0.13052619222005157, M22=0.9914448613738104, sizingMethod='auto expand');
  zoom: 1;
}

/*
 * Box sizing
 * content-box | border-box | padding-box
 * @include boxSizing(border-box);
 */
@mixin boxSizing($sizing) {
  -webkit-box-sizing: $sizing;
  -moz-box-sizing: $sizing;
  box-sizing: $sizing;
}

/*
 * Apply a CSS3 transform-origin
 * @include setTransformOrigin(origin);
 */
@mixin setTransformOrigin($origin) {
  -webkit-transform-origin:$origin;
  -moz-transform-origin:$origin;
  -ms-transform-origin:$origin;
  -o-transform-origin:$origin;
  transform-origin:$origin;
}

/*
 * @font-face mixin
 * @include font-face('family', '../fonts/', 'myfontname');
 */

@mixin font-face($font-family, $font-url, $font-name) {
  @font-face {
    font: {
      family: $font-family;
      style: normal;
      weight: normal;
    }
    src: url($font-url + '/' + $font-name + '.eot') format('eot'), 
       url($font-url + '/' + $font-name + '.woff') format('woff'), 
       url($font-url + '/' + $font-name + '.ttf')  format('truetype'),
       url($font-url + '/' + $font-name + '.svg#' + $font-name) format('svg');
  }
}

/*
 * Apply a CSS3 transition
 *
 * $property The property you want to animate, eg opacity
 * $duration The duration of the animation, eg 1s
 * $ms Include -ms-transition; default is false because IE does not support transitionEnd callback
 *
 * @include transition(opacity, 0.5s);
 */

@mixin transition($property, $duration, $ms: false) {
  -webkit-transition: $property $duration ease-in-out;
  -moz-transition: $property $duration ease-in-out;
  -o-transition: $property $duration ease-in-out;
  @if ($ms) {
    -ms-transition: $property $duration ease-in-out;
  }
  transition: $property $duration ease-in-out;
}

@mixin transitionLong($property, $duration, $easing:ease-in-out, $delay:false) {
  @include transitionProperty($property);
  @include transitionDuration($duration);
  
  @if($delay) {
    @include transitionDelay($delay);
  }
  
  @if($easing) {
    @include transitionTimingFunction($easing);
  }
}

/*
 * Apply a CSS3 transition-delay
 * @include transitionDelay(2s);
 */
@mixin transitionDelay($delay) {
  -webkit-transition-delay: $delay;
  -moz-transition-delay: $delay;
  -o-transition-delay: $delay;
  -ms-transition-delay: $delay;
  transition-delay: $delay;
}

/*
 * Apply a CSS3 transition-duration
 * @include transitionDuration(1s);
 */
@mixin transitionDuration($duration) {
  -webkit-transition-duration: $duration;
  -moz-transition-duration: $duration;
  -o-transition-duration: $duration;
  -ms-transition-duration: $duration;
  transition-duration: $duration;
}

/*
 * Apply a CSS3 transition-property
 * @include transitionProperty(opacity);
 * @include transitionProperty((height, width)); Multiple properties can be passed in surrounded by brackets
 */
@mixin transitionProperty($property) {
  -webkit-transition-property: $property;
  -moz-transition-property: $property;
  -o-transition-property: $property;
  -ms-transition-property: $property;
  transition-property: $property;
}

/*
 * Apply a CSS3 transition-timing-function
 * @include transitionTimingFunction(easing);
 */
@mixin transitionTimingFunction($easing) {
  -webkit-transition-timing-function: $easing;
  -moz-transition-timing-function: $easing;
  -o-transition-timing-function: $easing;
  -ms-transition-timing-function: $easing;
  transition-timing-function: $easing;
}

@mixin normaliseSelect() {
  -webkit-appearance: none;
  -moz-border-radius: 0;
  -webkit-border-radius: 0;
  border-radius: 0;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  -moz-background-clip: padding;
  -webkit-background-clip: padding;
  background-clip: padding-box;
  /* IE7 */
  *padding-top: 2px;
  *padding-bottom: 1px;
  *height: auto;
}